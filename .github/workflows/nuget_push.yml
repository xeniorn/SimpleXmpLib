# This workflow will build & test the .NET project, then package it and push to nuget
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: nuget-deploy

on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"
    - "v[0-9]+.[0-9]+.[0-9]+-[A-Za-z0-9]+"
  workflow_dispatch:
    inputs:
      override_version:
        description: 'should we override the version'
        required: true
        default: true
        type: boolean
      version:
        description: 'version to build'
        required: true
        default: '0.0.0-test'
        type: string

env:
  NUGET_OUTPUT_FOLDER: '.tmp'
  PACK_PROJECT_PATH: './SimpleXmpLib/SimpleXmpLib.csproj'
  PROJECT_NAME: 'SimpleXmpLib'
  NUGET_OUTPUT_FOLDER_2: '.tmp'
  PACK_PROJECT_PATH_2: './SimpleXmpLib.FileEmbedding/SimpleXmpLib.FileEmbedding.csproj'
  PROJECT_NAME_2: 'SimpleXmpLib.FileEmbedding'
  TARGET_CONFIGURATION: 'Release'
  TARGET_PLATFORM: 'x64'
  REQUIRED_DOTNET_VERSION: '9.x'
    
jobs:
  build_and_deploy_nuget:
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.REQUIRED_DOTNET_VERSION }}
    # - name: Verify commit exists in origin/develop or origin/main
    #   run: |
    #     git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*
    #     git branch --remote --contains | grep -e 'origin/(main|develop)'
    - name: Set VERSION variable from tag
      if: "${{ inputs.override_version == false || inputs.override_version == 'false' }}"
      shell: pwsh
      run: |
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
        echo "VERSION=$VERSION" >> $env:GITHUB_ENV
    - name: Override version
      if: "${{ inputs.override_version == true || inputs.override_version == 'true' }}"
      shell: pwsh
      run: |
        echo "VERSION=${{ inputs.version }}" >> $env:GITHUB_ENV
    - name: Build
      run: dotnet build --configuration ${{ env.TARGET_CONFIGURATION }} /p:Version=${{ env.VERSION }}
    - name: Test
      run: dotnet test --configuration ${{ env.TARGET_CONFIGURATION }} /p:Version=${{ env.VERSION }} --no-build
    - name: Pack
      run: dotnet pack --configuration ${{ env.TARGET_CONFIGURATION }} /p:Platform=${{ env.TARGET_PLATFORM }} /p:PackageVersion=${{ env.VERSION }} --output ${{ env.NUGET_OUTPUT_FOLDER }} --force ${{ env.PACK_PROJECT_PATH }} 
    - name: Push
      run: dotnet nuget push ${{ env.NUGET_OUTPUT_FOLDER }}/${{ env.PROJECT_NAME }}.${{ env.VERSION }}.nupkg --source ${{ env.NUGET_ENDPOINT_URL }} --api-key ${{ secrets.NUGET_API_KEY }}
      env:
        NUGET_ENDPOINT_URL: https://api.nuget.org/v3/index.json
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}        
    - name: Pack2
      run: dotnet pack --configuration ${{ env.TARGET_CONFIGURATION }} /p:Platform=${{ env.TARGET_PLATFORM }} /p:PackageVersion=${{ env.VERSION }} --output ${{ env.NUGET_OUTPUT_FOLDER_2 }} --force ${{ env.PACK_PROJECT_PATH_2 }} 
    - name: Push2
      run: dotnet nuget push ${{ env.NUGET_OUTPUT_FOLDER_2 }}/${{ env.PROJECT_NAME_2 }}.${{ env.VERSION }}.nupkg --source ${{ env.NUGET_ENDPOINT_URL }} --api-key ${{ secrets.NUGET_API_KEY }}
      env:
        NUGET_ENDPOINT_URL: https://api.nuget.org/v3/index.json
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
